<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Petitspois]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-01T06:47:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Petitspois]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git命令自动补全]]></title>
    <link href="http://yoursite.com/2015/09/01/gitauto/"/>
    <id>http://yoursite.com/2015/09/01/gitauto/</id>
    <published>2015-09-01T06:47:44.000Z</published>
    <updated>2015-09-01T06:47:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="自动补全">自动补全</h1><p>如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：<br>或者(find / -iname git-completion.bash)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/<span class="class">.git-completion</span><span class="class">.bash</span></span><br></pre></td></tr></table></figure>
<p>在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">co</span>&lt;<span class="comment">tab</span>&gt;&lt;<span class="comment">tab</span>&gt;</span><br><span class="line"><span class="comment">commit</span> <span class="comment">config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">s</span>&lt;<span class="comment">tab</span>&gt;</span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="comment">shortstat</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">since=</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">src</span><span class="literal">-</span><span class="comment">prefix=</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">stat</span>   <span class="literal">-</span><span class="literal">-</span><span class="comment">summary</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="自动补全">自动补全</h1><p>如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[简化版js模块开发]]></title>
    <link href="http://yoursite.com/2015/09/01/simplerequire/"/>
    <id>http://yoursite.com/2015/09/01/simplerequire/</id>
    <published>2015-09-01T06:45:50.000Z</published>
    <updated>2015-09-01T06:45:50.000Z</updated>
    <content type="html"><![CDATA[<p>如果你现在正在想要构建一种利于代码复用和后续维护开发的前端JS架构，那么也许你会选择模块化开发。然后在你的项目中引入requireJS或者seaJS这类模块加载器。这正是目前许多前端项目的布局。将公用的组件或功能模块分立成目标明确的小模块，按需加载。随着这种开发方式的流行，有好事者也在兴建各类规范，如commonJS或者AMD（requireJS）或者CMD（seaJS）等规范。然而今天我想推荐的一种布局方式同样也遵循commonJS规范，但是不需要使用模块加载器，更简单灵活，同时也能支持后续开发的良好进行。</p>
<p>其实我只是简化了requireJS这类模块加载器，而换成了十几行代码来替换。少了异步模块加载过程，少了模块依赖，而这正是这类加载器的复杂之处。然而却保留了最重要的模块开发良好的代码组织定义。少了这些还是模块开发吗？我们先来看看这十几行起到决定性作用的核心代码吧。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mapping = &#123;&#125;, cached = &#123;&#125;;</span><br><span class="line">    global.define = <span class="function"><span class="keyword">function</span>(<span class="params">id, func</span>)</span>&#123;</span><br><span class="line">        mapping[id] = func;</span><br><span class="line">    &#125;;</span><br><span class="line">    global.require = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cached[id])</span><br><span class="line">            <span class="keyword">return</span> cached[id];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> cached[id] = mapping[id](&#123;&#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>以上就是所有核心代码，在你的项目中写入以上代码，那么模块化开发就完成了一大半。接下这说说如何基于以上代码来定义模块和使用模块。</p>
<p>你可以像这样来定义一个功能模块：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'src/utils.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> verson = <span class="string">'1.00'</span>;</span><br><span class="line">    exports.getVersion = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> verson;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>你如果使用过模块加载器就应该知道exports是用来向外暴露接口的，这里作用相同。</p>
<p>在一个模块中引入另一个模块：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'src/main.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'src/utils.js'</span>);</span><br><span class="line">    <span class="keyword">var</span> version = utils.getVersion();<span class="comment">//'1.00'</span></span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上就已经基本搭建好了模块化开发环境，你就可以按照模块化开发的方式去开发了，将每一个模块保持为单独的js,如以上utils.js,main.js等。说到这里问题就来了，既然少了requireJS等模块加载器的加载行为，那我们怎么引入模块呀。这里我采用的方法也是将其简化。我利用ant结合脚本来对模块进行压缩合并。这样就可以满足当你改动某个模块JS代码，后台就自动将最新的代码合并。所以在你的页面中只会引入一个或少量的包含大部分公用模块的js文件。如我的项目中有个common.js，那么每当我修改utils.js则common.js也会进行最新的修改合并。所以在你的页面中只需要引入common.js就可以了。所以这里就少了模块异步加载的过程，一切都简化了。</p>
<p>这是有人可能会提出三个问题：<br>1.不需要的模块也加载进来了。<br>2.用户访问时不得不经常获取最新模块合并成的JS文件（如common.js），因为它经常改变。<br>3.模块过多会导致合并文件过大。</p>
<p>第一个问题，不需要的模块只是进行了定义，不会执行。对性能的影响可以忽略不计。第二个问题因为模块有时经常改变，就会导致整个模块合并成的JS文件更新，导致浏览器缓存不能使用。如果你的网站不是每天一次更新上线，那么这个问题就这样吧。第三个问题就是一般经过压缩后容量不会是太大问题，除非你做的是大型网站，还有就是正对不同功能的模块进行合并划分。比如UI组件模块可以进行单独合并，功能模块可以单独合并。</p>
<p>以上就是我推崇的针对中小型网站的开发模式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你现在正在想要构建一种利于代码复用和后续维护开发的前端JS架构，那么也许你会选择模块化开发。然后在你的项目中引入requireJS或者seaJS这类模块加载器。这正是目前许多前端项目的布局。将公用的组件或功能模块分立成目标明确的小模块，按需加载。随着这种开发方式的流行，有好事者也在兴建各类规范，如commonJS或者AMD（requireJS）或者CMD（seaJS）等规范。然而今天我想推荐的一种布局方式同样也遵循commonJS规范，但是不需要使用模块加载器，更简单灵活，同时也能支持后续开发的良好进行。</p>
<p>其实我只是简化了requireJS这类模块加载器，而换成了十几行代码来替换。少了异步模块加载过程，少了模块依赖，而这正是这类加载器的复杂之处。然而却保留了最重要的模块开发良好的代码组织定义。少了这些还是模块开发吗？我们先来看看这十几行起到决定性作用的核心代码吧。</p>]]>
    
    </summary>
    
      <category term="requirejs" scheme="http://yoursite.com/tags/requirejs/"/>
    
      <category term="seajs" scheme="http://yoursite.com/tags/seajs/"/>
    
      <category term="模块开发" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[js超简单模板引擎概念]]></title>
    <link href="http://yoursite.com/2015/09/01/simplemodule/"/>
    <id>http://yoursite.com/2015/09/01/simplemodule/</id>
    <published>2015-09-01T06:33:58.000Z</published>
    <updated>2015-09-01T06:33:58.000Z</updated>
    <content type="html"><![CDATA[<p>现在前端的童鞋经常会做这样一件事，把后台返回回来的json数据包装成展示给用户的视图。我做这件事其实是经历了3个阶段。第一个阶段就是字符串的拼接，把字符串和一些数据拼接起来变成我们想要的视图。第二个阶段就是使用模板引擎，从这儿开始有了模板的概念，模板开始进行了单独的分离。第三种方法就是我现在要介绍的。然而实际上这并不是技术递增的3个阶段。技术原理不变，只是一些思维上的转变却带来很大好处。就比如前端模板引擎，能让你处理好模板、数据和视图的关系，而不用像第一种方式那样杂糅在一起。至于第三种方法并不高明，确是我最近常采用的方法。或者说我本文要讲的可能是正则表达式。大家也不要有1、2、3这样的递进思维，不然可能很受伤。</p>
<p>这第三种方式其实就是使用正则表达式来对模板里要填充的数据进行匹配替换。就这么简单而已。</p>
<a id="more"></a>
<p>首先先写一个简单的模板：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">"template"</span> type=<span class="string">"text/template"</span>&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">		my name is &#123;#name&#125;, I'm a &#123;#gender&#125;. my hobby is &#123;#like&#125;, and my qq is &#123;#qq&#125;.</span><br><span class="line">	<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后借助如下的render方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params">str, data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> reg = <span class="regexp">/\&#123;#([^\&#125;]+)\&#125;/g</span>;</span><br><span class="line">	<span class="keyword">return</span> str.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">str, $1</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">typeof</span> data[$<span class="number">1</span>] !== <span class="string">"undefined"</span> ? data[$<span class="number">1</span>] : <span class="string">" undefined "</span>;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后把数据混入模板中变成我们要的视图：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">	name: <span class="string">"lichen"</span>,</span><br><span class="line">	gender: <span class="string">"boy"</span>,</span><br><span class="line">	like: <span class="string">"basketball"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> html= render(<span class="built_in">document</span>.getElementById(<span class="string">'template'</span>).innerHTML, data);</span><br></pre></td></tr></table></figure>
<p>执行render方法后会返回如下内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">	my name is lichen, I'm a boy. my hobby is basketball, and my qq is undefined.</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其实到这儿主要内容已经讲完。一点也不高深，你掌握了可能也没办法逆袭。然而想说的却还没有说尽。</p>
<p>你会发现这个简单到让人想死的render方法和前端模板引擎相比似乎少了些什么。前端模板引擎大都支持条件、遍历等逻辑。似乎这个没有支持哟。的确不支持。支持了也就变成了常规的前端模板引擎了，将模板根据特定规则转化成原生js代码片段字符串，然后利用new Function()来执行。这大概就是一般前端模板引擎的原理了。那这个不支持需要怎么处理呢？</p>
<p>如果涉及到条件和遍历等逻辑的话，我们就需要在数据上做处理了，比如后台返回一个isAdmin的参数值为0或1，我们根据这个来决定是否添加admin的class样式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.isAdmin = data.isAdmin ? <span class="string">'admin'</span> : <span class="string">''</span>;</span><br></pre></td></tr></table></figure>
<p>这样基本就能解决这些逻辑问题。然而却并不是一种很好的方式，但是使用这个的好处也很明显，对模板进行了解放，你会发现模板从此以后变得简洁直观，不再掺杂一些逻辑代码了。所以对于一些没有包含复杂逻辑的模板视图，我肯定会采用上述方式。</p>
<h3 id="模板保存在哪里比较好？">模板保存在哪里比较好？</h3><p>其实这是让我挺纠结的一个问题。也许纠结这个小问题让别人看笑话了。不过我觉得我们前端童鞋应该有两个努力方向：做大和做细。仰观宇宙之大 俯察品类之盛。有时你会发现你与别人的差异往往在一些细微之处。所以这个问题还是值得考虑的。现在有如下保存方式：</p>
<ol>
<li><p>保存在javascript中<br>这应该是最常用的方式，把模板当做js字符串变量来保存。在我们要使用的时候获取。这样也很方便。然而如果我们把MVC模式上升一个台阶，不要局限在某种编程语言的具体实现来看的话，对于一个web项目来说，M表示的是后端对数据的存取，V则指html、css经过浏览器渲染的视图，而javascript则扮演者Controller的角色。这个认识虽不一定严谨正确，却足以说明问题。模板应是属于视图部分，所以理论上来说应该尽量分离。</p>
</li>
<li><p>保存在html中<br>使用 <code>&lt;script type=”text/template”&gt;</code>等方式保存在页面html中，通过对该script节点获取内容。这种方式有效避免了视图和js的混杂。然而他的问题就是我们必须在需要的页面中都引进改模板，而不能像保存在js中，能够只通过引入一个js来共享。</p>
</li>
<li><p>单独文件，异步请求获取<br>这种方式使用得较少，异步请求毕竟需要时间，所以大家都不太常采用。</p>
</li>
</ol>
<p>我纠结的问题就是无法整理出一种共识的方法，往往选取了一种方法，另外一种方法的便利就丢了。所以最好还是灵活的混合使用。对于类似UI component全站公用的视图模板，保存在js中，而对于只是单个具体页面层的模板则采用第二种方法。这样也许算是个折中的好办法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在前端的童鞋经常会做这样一件事，把后台返回回来的json数据包装成展示给用户的视图。我做这件事其实是经历了3个阶段。第一个阶段就是字符串的拼接，把字符串和一些数据拼接起来变成我们想要的视图。第二个阶段就是使用模板引擎，从这儿开始有了模板的概念，模板开始进行了单独的分离。第三种方法就是我现在要介绍的。然而实际上这并不是技术递增的3个阶段。技术原理不变，只是一些思维上的转变却带来很大好处。就比如前端模板引擎，能让你处理好模板、数据和视图的关系，而不用像第一种方式那样杂糅在一起。至于第三种方法并不高明，确是我最近常采用的方法。或者说我本文要讲的可能是正则表达式。大家也不要有1、2、3这样的递进思维，不然可能很受伤。</p>
<p>这第三种方式其实就是使用正则表达式来对模板里要填充的数据进行匹配替换。就这么简单而已。</p>]]>
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs 运行管理应用PM2介绍]]></title>
    <link href="http://yoursite.com/2015/09/01/nodepm2/"/>
    <id>http://yoursite.com/2015/09/01/nodepm2/</id>
    <published>2015-09-01T06:02:00.000Z</published>
    <updated>2015-09-01T06:02:00.000Z</updated>
    <content type="html"><![CDATA[<p>devo.ps团队对JavaScript的迷恋已经不是什么秘密了;node.js作为服务器端,AngularJS作为客户端,某种程度上说,我们的堆栈是用它建成的.我们构建静态客户端和RESTful JSON API的方法意味着我们跑了很多的node.js,我必须承认尽管node.js的一切都令人敬畏,但当我们在生产环境中运行它时它仍然会让我们感到头疼.相比一些更加成熟的语言,它的工具和最佳实践仍然缺乏(试想一下:监控,日志,错误处理).</p>
<p>到目前为止,我们仍然依赖漂亮俏皮的node-forever模块.它是非常伟大的模块,不过依然缺失一些功能:</p>
<ul>
<li>有限的监控和日志功能</li>
<li>进程管理配置的支持差</li>
<li>不支持集群</li>
<li>代码库老化(意味着在升级node.js时频繁的失败)</li>
</ul>
<a id="more"></a>
<h3 id="PM2到底是什么个东西呢?">PM2到底是什么个东西呢?</h3><p>首先你需要先通过npm来安装它:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> pm2 -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure></p>
<p>让我们通过表格来对比下:</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th style="text-align:left">Forever</th>
<th style="text-align:left">PM2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keep Alive</td>
<td style="text-align:left">✔</td>
<td style="text-align:left">✔</td>
</tr>
<tr>
<td>Coffeescript</td>
<td style="text-align:left">✔</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>Log aggregation</td>
<td style="text-align:left"></td>
<td style="text-align:left">✔</td>
</tr>
<tr>
<td>API</td>
<td style="text-align:left"></td>
<td style="text-align:left">✔</td>
</tr>
<tr>
<td>Terminal monitoring</td>
<td style="text-align:left"></td>
<td style="text-align:left">✔</td>
</tr>
<tr>
<td>Clustering</td>
<td style="text-align:left"></td>
<td style="text-align:left">✔</td>
</tr>
<tr>
<td>JSON configuration</td>
<td style="text-align:left"></td>
<td style="text-align:left">✔</td>
</tr>
</tbody>
</table>
<p>现在让我来介绍一点点主要特性…</p>
<h3 id="原生的集群化支持">原生的集群化支持</h3><p>Node v0.6引入了集群特性,允许你在多个Node应用中共享socket.问题在于,它不能在容器外运行而且需要一些额外的配置来处理主进程和子进程.</p>
<p>PM2原生支持处理这个问题,而且不需要额外的代码:PM2本身作为主进程,然后它将你的代码封装到一个特殊的集群进程里,就像node.js一样,为你的代码文件添加一些全局变量.</p>
<p>想要启动一个使用所有CPU核心的集群,你只需要键入如下的指令:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 start app<span class="class">.js</span> -<span class="tag">i</span> max</span><br></pre></td></tr></table></figure>
<p>然后:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 <span class="type">list</span></span><br></pre></td></tr></table></figure>
<p>然后就会显示类似下面的东西(ASCII UI FTW);</p>
<p> <img src="http://deepblue.qiniudn.com/FutFPoHGju0uGmHohESVTjEaEx1E" alt="pm2-list.png"></p>
<p> 就像你看到的,现在你的应用有多少个进程就取决于你的CPU核心数了</p>
<h3 id="按照termcaps-HTOP(Linux下的系统监控与进程管理软件)的方式管理">按照termcaps-HTOP(Linux下的系统监控与进程管理软件)的方式管理</h3><p>通过pm2 list命令来观察所有运行的进程以及它们的状态已经足够好了.但是怎么来追踪它们的资源消耗呢?别担心,用这个命令:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>pm2 monit</span><br></pre></td></tr></table></figure>
<p> 你可以得到进程(以及集群)的CPU的使用率和内存占用.</p>
<p>  <img src="http://deepblue.qiniudn.com/Fhuu-MsMzKZTyJim98nOgOLiWikJ" alt="pm2-monit.png"></p>
<p><strong>声明:</strong>  node-usage到目前为止还不支持MacOS(随便什么性能要求),不过它在Linux下运行良好.</p>
<p>现在,让我们来核实一下我们的集群,还有对内存堆栈的垃圾回收,我们假设你已经有一个HTTP基准测试工具(如果没有,你一定要使用WRK):</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ express bufallo    //<span class="operator"><span class="keyword">Create</span> an express app</span><br><span class="line">$ cd bufallo</span><br><span class="line">$ npm <span class="keyword">install</span></span><br><span class="line">$ pm2 <span class="keyword">start</span> app.js -<span class="keyword">i</span> <span class="keyword">max</span></span><br><span class="line">$ wrk -<span class="keyword">c</span> <span class="number">100</span> -<span class="keyword">d</span> <span class="number">100</span> <span class="keyword">http</span>://localhost:<span class="number">3000</span>/</span></span><br></pre></td></tr></table></figure>
<p>在另一个终端,运行监控选项:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure>
<h3 id="实时集中log处理">实时集中log处理</h3><p>现在你不得不管理多个集群进程:一个爬取数据,一个处理数据,等等…这就意味着大量log,你可以按照老式的方法处理:\</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f /path/to/log1 /path/to/log2 ...</span><br></pre></td></tr></table></figure>
<p>但我们想的很周到,我们增加了logs功能:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs</span><br></pre></td></tr></table></figure>
<p> <img src="http://deepblue.qiniudn.com/FrgL120cv9vGMJHKVagoj_AsxUJw" alt="pm2-logs.png"></p>
<h3 id="快速恢复">快速恢复</h3><p> 现在事情一切顺利,你的进程嗡嗡的运行着,你需要做一次硬重启(hard restart).现在吗?是的,首先,dump掉:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 dump</span><br></pre></td></tr></table></figure>
<p> 然后,你可以从文件中恢复它:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 kill      //&#35753;&#25105;&#20204;&#20551;&#35774;&#19968;&#20010;PM2&#20572;&#25481;&#20102;&#10;$ pm2 resurect  //&#25105;&#25152;&#26377;&#30340;&#36827;&#31243;&#21448;&#28385;&#34880;&#28385;&#29366;&#24577;&#22797;&#27963;&#20102;</span><br></pre></td></tr></table></figure>
<h3 id="强健的API">强健的API</h3><p> 比方说,你想要监控所有被PM2管理的进程,而且同时还想监控运行这些进程的机器的状态(甚至希望创建一个Angular应用来调用这些API…):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 web</span><br></pre></td></tr></table></figure>
<p> 打开浏览器输入<a href="http://localhost:9615" target="_blank" rel="external">http://localhost:9615</a> </p>
<h3 id="对了,还有很多特性…">对了,还有很多特性…</h3><ul>
<li>全部测试通过,</li>
<li>新一代的update-rc.d(pm2 startup),当然它还是alpha版,</li>
<li>开发模式下更改文件自动重启(pm2 dev),也同样还是草稿,</li>
<li>自动刷新log,</li>
<li>快捷的通过JSON文件管理你的应用,</li>
<li>在error log里记录未捕获的异常,</li>
<li>记录重启的次数和时间,</li>
<li>退出时自动杀死进程.</li>
</ul>
<h3 id="下一步计划?">下一步计划?</h3><p>首先,你可以去Github上粉我们(我们喜欢stars).</p>
<p>我们开发的PM2提供了先进完整的Node进程管理解决方案.我们希望能有更多的人来帮助我们:更多的pull requests.一些还停留在开发路线图上面的功能我们会尽快完成,下面这些就是:</p>
<ul>
<li>远程管理/状态校验,</li>
<li>嵌入式跨进程通信通道(消息总线),</li>
<li>V8垃圾回收的内存泄漏检查,</li>
<li>Web界面,</li>
<li>监控数据持久化,</li>
<li>邮件通知.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>devo.ps团队对JavaScript的迷恋已经不是什么秘密了;node.js作为服务器端,AngularJS作为客户端,某种程度上说,我们的堆栈是用它建成的.我们构建静态客户端和RESTful JSON API的方法意味着我们跑了很多的node.js,我必须承认尽管node.js的一切都令人敬畏,但当我们在生产环境中运行它时它仍然会让我们感到头疼.相比一些更加成熟的语言,它的工具和最佳实践仍然缺乏(试想一下:监控,日志,错误处理).</p>
<p>到目前为止,我们仍然依赖漂亮俏皮的node-forever模块.它是非常伟大的模块,不过依然缺失一些功能:</p>
<ul>
<li>有限的监控和日志功能</li>
<li>进程管理配置的支持差</li>
<li>不支持集群</li>
<li>代码库老化(意味着在升级node.js时频繁的失败)</li>
</ul>]]>
    
    </summary>
    
      <category term="PM2" scheme="http://yoursite.com/tags/PM2/"/>
    
      <category term="forever" scheme="http://yoursite.com/tags/forever/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown 超简明语法]]></title>
    <link href="http://yoursite.com/2015/09/01/markdown/"/>
    <id>http://yoursite.com/2015/09/01/markdown/</id>
    <published>2015-09-01T05:42:52.000Z</published>
    <updated>2015-09-01T05:42:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Markdown_简明语法">Markdown 简明语法</h3><h3 id="标题">标题</h3><p>h1到h6由相应的#输出<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># h1 Heading</span></span><br><span class="line"><span class="preprocessor">## h2 Heading</span></span><br><span class="line"><span class="preprocessor">### h3 Heading</span></span><br><span class="line"><span class="preprocessor">#### h4 Heading</span></span><br><span class="line"><span class="preprocessor">##### h5 Heading</span></span><br><span class="line"><span class="preprocessor">###### h6 Heading</span></span><br></pre></td></tr></table></figure></p>
<p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>h1 Heading<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>h2 Heading<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>h3 Heading<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h4</span>&gt;</span>h4 Heading<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h5</span>&gt;</span>h5 Heading<span class="tag">&lt;/<span class="title">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h6</span>&gt;</span>h6 Heading<span class="tag">&lt;/<span class="title">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="水平线">水平线</h3><p>在html中<hr>为水平线，在段元素中，在markdown中</p>
<ul>
<li>___:三个连续的下划线</li>
<li>—:三个破折号</li>
<li>*** :三个星号</li>
</ul>
<h3 id="重点（加粗）">重点（加粗）</h3><p>为了强调文本可以<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">*</span><span class="keyword">*</span>rendered as bold text<span class="keyword">*</span><span class="keyword">*</span></span><br></pre></td></tr></table></figure></p>
<p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>rendered as bold text<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>###斜体<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_rendered <span class="keyword">as</span> italicized text_</span><br></pre></td></tr></table></figure></p>
<p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">em</span>&gt;</span>rendered as italicized text<span class="tag">&lt;/<span class="title">em</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="删除线">删除线</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~Strike <span class="keyword">through</span> this <span class="type">text</span>.~~</span><br></pre></td></tr></table></figure>
<h3 id="引用块">引用块</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add `&gt;` <span class="keyword">before</span> <span class="keyword">any</span> <span class="keyword">text</span> you want <span class="built_in">to</span> <span class="constant">quote</span>.</span><br></pre></td></tr></table></figure>
<p>HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也可以嵌套<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Donec massa lacus, ultricies <span class="tag">a</span> ullamcorper <span class="keyword">in</span>, fermentum sed augue. </span><br><span class="line">Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. </span><br><span class="line">&gt;&gt; Sed adipiscing elit vitae augue consectetur <span class="tag">a</span> gravida nunc vehicula. Donec auctor </span><br><span class="line">odio non est accumsan facilisis. Aliquam id turpis <span class="keyword">in</span> dolor tincidunt mollis ac eu diam.</span><br><span class="line">&gt;&gt;&gt; Donec massa lacus, ultricies <span class="tag">a</span> ullamcorper <span class="keyword">in</span>, fermentum sed augue. </span><br><span class="line">Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.</span><br></pre></td></tr></table></figure></p>
<p>效果：</p>
<blockquote>
<p>Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.<br>Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. </p>
<blockquote>
<p>Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor<br>odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.</p>
<blockquote>
<p>Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.<br>Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. </p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="无序列表">无序列表</h3><p>你可以使用下面任何符号：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>valid bullet</span><br><span class="line"><span class="bullet">- </span>valid bullet</span><br><span class="line"><span class="bullet">+ </span>valid bullet</span><br></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ Lo<span class="comment">rem ipsum dolor sit amet</span></span><br><span class="line">+ Consectetur adipiscing elit</span><br><span class="line">+ Integer molestie lo<span class="comment">rem at massa</span></span><br><span class="line">+ Facilisis <span class="flow">in</span> pretium nisl aliquet</span><br><span class="line">+ Nulla volutpat aliquam velit</span><br><span class="line">  - Phasellus iaculis neque</span><br><span class="line">  - Purus sodales ultricies</span><br><span class="line">  - Vestibulum laoreet porttitor sem</span><br><span class="line">  - Ac tristique libero volutpat <span class="built_in">at</span></span><br><span class="line">+ Faucibus porta lacus fringilla vel</span><br><span class="line">+ Aenean sit amet erat nunc</span><br><span class="line">+ Eget porttitor lo<span class="comment">rem</span></span><br></pre></td></tr></table></figure></p>
<p>效果:</p>
<ul>
<li>Lorem ipsum dolor sit amet</li>
<li>Consectetur adipiscing elit</li>
<li>Integer molestie lorem at massa</li>
<li>Facilisis in pretium nisl aliquet</li>
<li>Nulla volutpat aliquam velit<ul>
<li>Phasellus iaculis neque</li>
<li>Purus sodales ultricies</li>
<li>Vestibulum laoreet porttitor sem</li>
<li>Ac tristique libero volutpat at</li>
</ul>
</li>
<li>Faucibus porta lacus fringilla vel</li>
<li>Aenean sit amet erat nunc</li>
<li>Eget porttitor lorem</li>
</ul>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Consectetur adipiscing elit<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Integer molestie lorem at massa<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Facilisis in pretium nisl aliquet<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Nulla volutpat aliquam velit</span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span>Phasellus iaculis neque<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span>Purus sodales ultricies<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span>Vestibulum laoreet porttitor sem<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span>Ac tristique libero volutpat at<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Faucibus porta lacus fringilla vel<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Aenean sit amet erat nunc<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Eget porttitor lorem<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="有序列表">有序列表</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. Lo<span class="comment">rem ipsum dolor sit amet</span></span><br><span class="line"><span class="number">2</span>. Consectetur adipiscing elit</span><br><span class="line"><span class="number">3</span>. Integer molestie lo<span class="comment">rem at massa</span></span><br><span class="line"><span class="number">4</span>. Facilisis <span class="flow">in</span> pretium nisl aliquet</span><br><span class="line"><span class="number">5</span>. Nulla volutpat aliquam velit</span><br><span class="line"><span class="number">6</span>. Faucibus porta lacus fringilla vel</span><br><span class="line"><span class="number">7</span>. Aenean sit amet erat nunc</span><br><span class="line"><span class="number">8</span>. Eget porttitor lo<span class="comment">rem</span></span><br></pre></td></tr></table></figure>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Lorem ipsum dolor sit amet<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Consectetur adipiscing elit<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Integer molestie lorem at massa<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Facilisis in pretium nisl aliquet<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Nulla volutpat aliquam velit<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Faucibus porta lacus fringilla vel<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Aenean sit amet erat nunc<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Eget porttitor lorem<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>TIP:如果序号只写1. 的情况，github会帮助你完成顺序</p>
<h3 id="code">code</h3><p>用“ ` ”包裹你的代码<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="escape">`&lt;</span>section&gt;&lt;/section&gt;<span class="escape">` </span>should be wrapped as <span class="string">"inline"</span>.</span><br></pre></td></tr></table></figure></p>
<h3 id="Block_code">Block code</h3><p>` ` ` html<br>Sample text here…<br>` ` `</p>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Sample text here...<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">pre</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="表格">表格</h3><p>通过管道符来连接table<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Option </span>|<span class="string"> Description </span>|</span><br><span class="line">|<span class="string"> ------ </span>|<span class="string"> ----------- </span>|</span><br><span class="line">|<span class="string"> data   </span>|<span class="string"> path to data files to supply the data that will be passed into templates. </span>|</span><br><span class="line">|<span class="string"> engine </span>|<span class="string"> engine to be used for processing templates. Handlebars is the default. </span>|</span><br><span class="line">|<span class="string"> ext    </span>|<span class="string"> extension to be used for dest files. </span>|</span><br></pre></td></tr></table></figure></p>
<p>效果:</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">th</span>&gt;</span>Option<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>data<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>path to data files to supply the data that will be passed into templates.<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>engine<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>engine to be used for processing templates. Handlebars is the default.<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>ext<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">td</span>&gt;</span>extension to be used for dest files.<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="表格右对齐">表格右对齐</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> Option </span>|<span class="string"> Description </span>|</span><br><span class="line">|<span class="string"> ------:</span>|<span class="string"> -----------:</span>|</span><br><span class="line">|<span class="string"> data   </span>|<span class="string"> path to data files to supply the data that will be passed into templates. </span>|</span><br><span class="line">|<span class="string"> engine </span>|<span class="string"> engine to be used for processing templates. Handlebars is the default. </span>|</span><br><span class="line">|<span class="string"> ext    </span>|<span class="string"> extension to be used for dest files. </span>|</span><br></pre></td></tr></table></figure>
<p>效果</p>
<table>
<thead>
<tr>
<th style="text-align:right">Option</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="链接">链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">Docsren</span>](<span class="link_url">http://www.docs.ren</span>)</span><br></pre></td></tr></table></figure>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://assemble.io"</span>&gt;</span>Assemble<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="为链接添加title">为链接添加title</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">Docsren</span>](<span class="link_url">http://www.docs.ren "index"</span>)</span><br></pre></td></tr></table></figure>
<p>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://www.docs.ren"</span> <span class="attribute">title</span>=<span class="value">"index"</span>&gt;</span>Docsren<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="锚链接">锚链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="header"># Table of Contents</span></span><br><span class="line">  * [<span class="link_label">Chapter 1</span>](<span class="link_url">#chapter-1</span>)</span><br><span class="line">  * [<span class="link_label">Chapter 2</span>](<span class="link_url">#chapter-2</span>)</span><br><span class="line">  * [<span class="link_label">Chapter 3</span>](<span class="link_url">#chapter-3</span>)</span><br></pre></td></tr></table></figure>
<p>会跳转到以下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## Chapter 1 <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"chapter-1"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">Content for chapter one.</span><br><span class="line"></span><br><span class="line">## Chapter 2 <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"chapter-2"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">Content for chapter one.</span><br><span class="line"></span><br><span class="line">## Chapter 3 <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"chapter-3"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">Content for chapter one.</span><br></pre></td></tr></table></figure></p>
<h3 id="图片">图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">hello</span>](<span class="link_url">http://www.docs.ren/images/hello.png</span>)</span><br></pre></td></tr></table></figure>
<p>or<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="link_label">Alt text</span>](<span class="link_url">http://octodex.github.com/images/stormtroopocat.jpg "The Stormtroopocat"</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Markdown_简明语法">Markdown 简明语法</h3><h3 id="标题">标题</h3><p>h1到h6由相应的#输出<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># h1 Heading</span></span><br><span class="line"><span class="preprocessor">## h2 Heading</span></span><br><span class="line"><span class="preprocessor">### h3 Heading</span></span><br><span class="line"><span class="preprocessor">#### h4 Heading</span></span><br><span class="line"><span class="preprocessor">##### h5 Heading</span></span><br><span class="line"><span class="preprocessor">###### h6 Heading</span></span><br></pre></td></tr></table></figure></p>
<p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>h1 Heading<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>h2 Heading<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h3</span>&gt;</span>h3 Heading<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h4</span>&gt;</span>h4 Heading<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h5</span>&gt;</span>h5 Heading<span class="tag">&lt;/<span class="title">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h6</span>&gt;</span>h6 Heading<span class="tag">&lt;/<span class="title">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongoose 简单介绍与常用方法?]]></title>
    <link href="http://yoursite.com/2015/09/01/mongoose/"/>
    <id>http://yoursite.com/2015/09/01/mongoose/</id>
    <published>2015-09-01T05:42:41.000Z</published>
    <updated>2015-09-01T05:42:41.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Mongoose">Mongoose</h1><h2 id="Mongoose_是什么?">Mongoose 是什么?</h2><p>一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口.</p>
<h2 id="Schema">Schema</h2><p>一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义一个 Schema */</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TestSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name : &#123; type:<span class="built_in">String</span> &#125;,<span class="comment">//属性name,类型为String</span></span><br><span class="line">    age  : &#123; type:<span class="built_in">Number</span>, <span class="keyword">default</span>:<span class="number">0</span> &#125;,<span class="comment">//属性age,类型为Number,默认为0</span></span><br><span class="line">    time : &#123; type:<span class="built_in">Date</span>, <span class="keyword">default</span>:<span class="built_in">Date</span>.now &#125;,</span><br><span class="line">    email: &#123; type:<span class="built_in">String</span>,<span class="keyword">default</span>:<span class="string">''</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面这个 TestSchema包含4个属性 [name, age, time, email]</p>
<a id="more"></a>
<h2 id="Model">Model</h2><p>由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://127.0.0.1:27017/test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Model</span></span><br><span class="line"><span class="keyword">var</span> TestModel = db.model(<span class="string">"test1"</span>, TestSchema);</span><br></pre></td></tr></table></figure></p>
<p>test1 数据库中的集合名称, 不存在会创建.</p>
<h2 id="Entity">Entity</h2><p>由Model创建的实体，使用save方法保存数据，Model和Entity都有能影响数据库的操作，但Model比Entity更具操作性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TestEntity = <span class="keyword">new</span> TestModel(&#123;</span><br><span class="line">       name : <span class="string">"Lenka"</span>,</span><br><span class="line">       age  : <span class="number">36</span>,</span><br><span class="line">       email: <span class="string">"lenka@qq.com"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(TestEntity.name); <span class="comment">// Lenka</span></span><br><span class="line"><span class="built_in">console</span>.log(TestEntity.age); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure></p>
<h2 id="游标">游标</h2><p>MongoDB 使用游标返回find的执行结果.客户端对游标的实现通常能够对最终结果进行有效的控制。可以限制结果的数量，略过部分结果，根据任意键按任意顺序的组合对结果进行各种排序，或者是执行其他一些强的操作。</p>
<h2 id="ObjectId">ObjectId</h2><p>存储在mongodb集合中的每个文档（document）都有一个默认的主键_id，这个主键名称是固定的，它可以是mongodb支持的任何数据类型，默认是ObjectId。</p>
<p>ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，依次代表：<br>4字节：UNIX时间戳<br>3字节：表示运行MongoDB的机器<br>2字节：表示生成此_id的进程<br>3字节：由一个随机数开始的计数器生成的值</p>
<h2 id="Node-js">Node.js</h2><p>package.json 中加入”mongoose”: “*” 字段<br>npm install 安装依赖.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://localhost:27017/test"</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后引用</p>
<h2 id="API">API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(<span class="string">"mongodb://localhost:27017/test"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="db_-_数据库操作">db - 数据库操作</h2><p>1.挂接数据库连接事件,参数1: 也可以是error.</p>
<blockquote>
<p>db.connection.on(‘open’, callback);</p>
</blockquote>
<h2 id="Schema_-_表结构">Schema - 表结构</h2><p>1.构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> mongoose.Schema( &#123; name:&#123;type:<span class="built_in">String</span>&#125;, age:&#123;type:<span class="built_in">Number</span>, <span class="keyword">default</span>:<span class="number">10</span>&#125;  &#125; )</span><br></pre></td></tr></table></figure></p>
<p>2.添加属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Schema.add( &#123; name: <span class="string">'String’, email: '</span><span class="built_in">String</span>’, age: ‘<span class="built_in">Number</span>’ &#125; )</span><br></pre></td></tr></table></figure></p>
<p>3.有时候Schema不仅要为后面的Model和Entity提供公共的属性，还要提供公共的方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Schema.method( 'say’, function()&#123;console.log(‘hello’);&#125; )</span><br><span class="line">//这样Model和Entity的实例就能使用这个方法了</span><br></pre></td></tr></table></figure></p>
<p>4.添加静态方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Schema.static( 'say’, function()&#123;console.log(‘hello’);&#125; )</span><br><span class="line">//静态方法，只限于在Model层就能使用</span><br></pre></td></tr></table></figure></p>
<p>5.追加方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Schema.methods.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(‘hello’);&#125;;</span><br><span class="line"><span class="comment">//静态方法，只限于在Model层就能使用</span></span><br></pre></td></tr></table></figure></p>
<h2 id="model_-_文档操作">model - 文档操作</h2><p>1.构造函数, 参数1:集合名称, 参数2:Schema实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.model(<span class="string">"test1"</span>, TestSchema );</span><br></pre></td></tr></table></figure></p>
<p>2.查询, 参数1忽略,或为空对象则返回所有集合文档<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">model.find(&#123;&#125;, callback);</span><br><span class="line"></span><br><span class="line">model.find(&#123;&#125;,field,callback);</span><br><span class="line">过滤查询,参数2: &#123;’name’:1, 'age’:0&#125; 查询文档的返回结果包含name , 不包含age.(_id默认是1)</span><br><span class="line"></span><br><span class="line">model.find(&#123;&#125;,null,&#123;limit:20&#125;);</span><br><span class="line">过滤查询,参数3: 游标操作 limit限制返回结果数量为20个,如不足20个则返回所有.</span><br><span class="line"></span><br><span class="line">model.findOne(&#123;&#125;, callback);</span><br><span class="line">查询找到的第一个文档</span><br><span class="line"></span><br><span class="line">model.findById('obj._id’, callback);</span><br><span class="line">查询找到的第一个文档,同上. 但是只接受 __id 的值查询</span><br></pre></td></tr></table></figure></p>
<p>3.创建, 在集合中创建一个文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.create(文档数据, callback))</span><br></pre></td></tr></table></figure></p>
<p>4.更新,参数1:查询条件, 参数2:更新对象,可以使用MondoDB的更新修改器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.update(conditions, update, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>5.删除, 参数1:查询条件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.remove(conditions,callback);</span><br></pre></td></tr></table></figure></p>
<h2 id="Entity_-_文档操作">Entity - 文档操作</h2><p>1.构造函数, 其实就是model的实例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TestModel( &#123; name:’xueyou’, age:<span class="number">21</span> &#125; );</span><br></pre></td></tr></table></figure>
<p>2.创建, 在集合中创建一个文档.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entity.save(callback);</span><br></pre></td></tr></table></figure></p>
<h2 id="修改器和更新器">修改器和更新器</h2><h3 id="更新修改器:">更新修改器:</h3><p>‘$inc’ 增减修改器,只对数字有效.下面的实例: 找到 age=22的文档,修改文档的age值自增1<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$inc’:&#123;’age’:<span class="number">1</span>&#125; &#125;  );</span><br><span class="line">执行后: age=<span class="number">23</span></span><br></pre></td></tr></table></figure></p>
<p>‘$set’ 指定一个键的值,这个键不存在就创建它.可以是任何MondoDB支持的类型.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$set’:&#123;’age’:’haha’&#125; &#125;  );</span><br><span class="line">执行后: age=’haha’</span><br></pre></td></tr></table></figure></p>
<p>‘$unset’ 同上取反,删除一个键<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$unset’:&#123;’age’:’haha’&#125; &#125;  );</span><br><span class="line">执行后: age键不存在</span><br></pre></td></tr></table></figure></p>
<h3 id="数组修改器:">数组修改器:</h3><p>‘$push’ 给一个键push一个数组成员,键不存在会创建<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$push’:&#123;’array’:<span class="number">10</span>&#125; &#125;  );</span><br><span class="line">执行后: 增加一个 array 键,类型为数组, 有一个成员 <span class="number">10</span></span><br></pre></td></tr></table></figure></p>
<p>‘$addToSet’ 向数组中添加一个元素,如果存在就不添加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$addToSet’:&#123;’array’:<span class="number">10</span>&#125; &#125;  );</span><br><span class="line">执行后: array中有<span class="number">10</span>所以不会添加</span><br></pre></td></tr></table></figure></p>
<p>‘$each’ 遍历数组, 和 $push 修改器配合可以插入多个值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$push’:&#123;’array’:&#123;’$each’: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;&#125; &#125;  );</span><br><span class="line">执行后: array : [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></p>
<p>‘$pop’ 向数组中尾部删除一个元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$pop’:&#123;’array’:<span class="number">1</span>&#125; &#125;  );</span><br><span class="line">执行后: array : [<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  tips: 将<span class="number">1</span>改成-<span class="number">1</span>可以删除数组首部元素</span><br></pre></td></tr></table></figure></p>
<p>‘$pull’ 向数组中删除指定元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.update(&#123;’age’:<span class="number">22</span>&#125;, &#123;’$pull’:&#123;’array’:<span class="number">10</span>&#125; &#125;  );</span><br><span class="line">执行后: array : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  匹配到array中的<span class="number">10</span>后将其删除</span><br></pre></td></tr></table></figure></p>
<h3 id="条件查询:">条件查询:</h3><ul>
<li>“$lt” 小于</li>
<li>“$lte” 小于等于</li>
<li>“$gt” 大于</li>
<li>“$gte” 大于等于</li>
<li>“$ne” 不等于</li>
</ul>
<blockquote>
<p>Model.find({“age”:{ “$get”:18 , “$lte”:30 } } );</p>
</blockquote>
<p>查询 age 大于等于18并小于等于30的文档</p>
<h3 id="或查询_OR:">或查询 OR:</h3><ul>
<li>‘$in’ 一个键对应多个值</li>
<li>‘$nin’ 同上取反, 一个键不对应指定值</li>
<li>“$or” 多个条件匹配, 可以嵌套 $in 使用</li>
<li>“$not” 同上取反, 查询与特定模式不匹配的文档<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"age"</span>:&#123; <span class="string">"$in"</span>:[<span class="number">20</span>,<span class="number">21</span>,<span class="number">22.</span>’haha’]&#125; &#125; );</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>查询 age等于20或21或21或’haha’的文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"$or"</span> :  [ &#123;’age’:<span class="number">18</span>&#125; , &#123;’name’:’xueyou’&#125; ] &#125;);</span><br></pre></td></tr></table></figure></p>
<p>查询 age等于18 或 name等于’xueyou’ 的文档</p>
<h3 id="类型查询:">类型查询:</h3><p>null 能匹配自身和不存在的值, 想要匹配键的值 为null, 就要通过  “$exists” 条件判定键值已经存在“$exists” (表示是否存在的意思)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(“age” :  &#123; “$<span class="keyword">in</span>” : [<span class="literal">null</span>] , “exists” : <span class="literal">true</span>  &#125; );</span><br><span class="line">查询 age值为<span class="literal">null</span>的文档</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;name: &#123;$exists: <span class="literal">true</span>&#125;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,docs</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询所有存在name属性的文档</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Model.find(&#123;telephone: &#123;$exists: <span class="literal">false</span>&#125;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error,docs</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//查询所有不存在telephone属性的文档</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式:">正则表达式:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"array"</span>:<span class="number">10</span>&#125; );</span><br><span class="line">查询 array(数组类型)键中有<span class="number">10</span>的文档,  array : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>]  会匹配到</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"array[5]"</span>:<span class="number">10</span>&#125; );</span><br><span class="line">查询 array(数组类型)键中下标<span class="number">5</span>对应的值是<span class="number">10</span>,  array : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>]  会匹配到</span><br></pre></td></tr></table></figure>
<p>‘$all’ 匹配数组中多个元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"array"</span>:[<span class="number">5</span>,<span class="number">10</span>]&#125; );</span><br><span class="line">查询 匹配array数组中 既有<span class="number">5</span>又有<span class="number">10</span>的文档</span><br></pre></td></tr></table></figure></p>
<p>‘$size’ 匹配数组长度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"array"</span>:&#123;<span class="string">"$size"</span> : <span class="number">3</span>&#125; &#125; );</span><br><span class="line">查询 匹配array数组长度为<span class="number">3</span> 的文档</span><br></pre></td></tr></table></figure></p>
<p>‘$slice’ 查询子集合返回<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Model.find(&#123;<span class="string">"array"</span>:&#123;<span class="string">"$skice"</span> : <span class="number">10</span>&#125; &#125; );</span><br><span class="line">查询 匹配array数组的前<span class="number">10</span>个元素</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Model.find(&#123;<span class="string">"array"</span>:&#123;<span class="string">"$skice"</span> : [<span class="number">5</span>,<span class="number">10</span>] &#125; &#125; );</span><br><span class="line">查询 匹配array数组的第<span class="number">5</span>个到第<span class="number">10</span>个元素</span><br></pre></td></tr></table></figure>
<h3 id="where">where</h3><p>用它可以执行任意javacript语句作为查询的一部分,如果回调函数返回 true 文档就作为结果的一部分返回<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">find( &#123;<span class="string">"$where"</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> x <span class="keyword">in</span> <span class="keyword">this</span> )&#123;</span><br><span class="line">         <span class="comment">//这个函数中的 this 就是文档</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x !== <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.y !== <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y === <span class="number">10</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>简化版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find( &#123;<span class="string">"$where"</span> :  <span class="string">"this.x + this.y === 10"</span> &#125; )</span><br><span class="line">find( &#123;<span class="string">"$where"</span> : <span class="string">" function()&#123; return this.x + this.y ===10; &#125; "</span> &#125; )</span><br></pre></td></tr></table></figure></p>
<h3 id="游标:">游标:</h3><ul>
<li>limit(3) 限制返回结果的数量,</li>
<li>skip(3) 跳过前3个文档,返回其余的</li>
<li>sort( {“username”:1 , “age”:-1 } ) 排序 键对应文档的键名, 值代表排序方向, 1 升序, -1降序</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Mongoose">Mongoose</h1><h2 id="Mongoose_是什么?">Mongoose 是什么?</h2><p>一般我们不直接用MongoDB的函数来操作MongoDB数据库 Mongose就是一套操作MongoDB数据库的接口.</p>
<h2 id="Schema">Schema</h2><p>一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力.可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义一个 Schema */</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TestSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name : &#123; type:<span class="built_in">String</span> &#125;,<span class="comment">//属性name,类型为String</span></span><br><span class="line">    age  : &#123; type:<span class="built_in">Number</span>, <span class="keyword">default</span>:<span class="number">0</span> &#125;,<span class="comment">//属性age,类型为Number,默认为0</span></span><br><span class="line">    time : &#123; type:<span class="built_in">Date</span>, <span class="keyword">default</span>:<span class="built_in">Date</span>.now &#125;,</span><br><span class="line">    email: &#123; type:<span class="built_in">String</span>,<span class="keyword">default</span>:<span class="string">''</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面这个 TestSchema包含4个属性 [name, age, time, email]</p>]]>
    
    </summary>
    
      <category term="mongoose" scheme="http://yoursite.com/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gulp，新一代流行的任务自动管理工具]]></title>
    <link href="http://yoursite.com/2015/09/01/gulp/"/>
    <id>http://yoursite.com/2015/09/01/gulp/</id>
    <published>2015-09-01T05:35:55.000Z</published>
    <updated>2015-09-01T05:35:55.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>官网：<a href="http://gulpjs.com" target="_blank" rel="external">http://gulpjs.com</a></li>
<li>API：<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a></li>
</ul>
<blockquote>
<p>Gulp与Grunt一样，也是一个自动任务运行器。它充分借鉴了Unix操作系统的管道（pipe）思想，很多人认为，在操作上，它要比Grunt简单。</p>
</blockquote>
<h3 id="安装">安装</h3><blockquote>
<p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> gulp</span><br><span class="line"></span><br><span class="line">// 将gulp安装到项目本地</span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev gulp</span></span><br><span class="line">// 安装插件</span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev gulp-uglify</span></span><br><span class="line">npm <span class="keyword">install</span> gulp-jshint gulp-sass gulp-<span class="keyword">concat</span> gulp-uglify gulp-rename <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="gulpfile-js">gulpfile.js</h3><blockquote>
<p>项目根目录中的gulpfile.js，是Gulp的配置文件。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面就是一个典型的gulpfile.js文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'js/app.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>gulp模块的task方法指定任务。task方法有两个参数，第一个是任务名，第二个是任务函数。</p>
<p>在任务函数中：</p>
<blockquote>
<p>使用gulp模块的src方法，指定所要处理的文件，然后使用pipe方法，将上一步的输出转为当前的输入，进行链式处理。</p>
<p>从上面的例子中可以看到，gulp充分使用了“管道”思想，就是一个数据流（stream）：src方法读入文件产生数据流，dest方法将数据流写入文件，中间是一些中间步骤，每一步都对数据流进行一些处理。</p>
</blockquote>
<p>gulp.src(‘js/app.js’)：指定所要处理的文件 pipe()：将上一步的输出转为当前的输入，进行链式处理。 uglify()：压缩源码 gulp.dest(‘build’)：将上一步的输出写入本地文件，这里是build.js（代码中省略了后缀名js）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查脚本：Link任务会检查js/目录下得js文件有没有报错或警告。</span></span><br><span class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(jshint())</span><br><span class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译Sass：Sass任务会编译scss/目录下的scss文件，并把编译完成的css文件保存到/css目录中。</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并，压缩文件:scripts任务会合并js/目录下得所有得js文件并输出到dist/目录，然后gulp会重命名、压缩合并的文件，也输出到dist/目录。</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</span><br><span class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务:这时，我们创建了一个基于其他任务的default任务。使用.run()方法关联和运行我们上面定义的任务，使用.watch()方法去监听指定目录的文件变化，当有文件变化时，会运行回调定义的其他任务。</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听文件变化</span></span><br><span class="line">    gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在，回到命令行，可以直接运行gulp任务了 gulp 这将执行定义的default任务，换言之，这和以下的命令式同一个意思 gulp default</p>
<h3 id="模块加载">模块加载</h3><p>1.gulpfile.js中一一加载模块</p>
<p>gulpfile.js</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    jshint = <span class="keyword">require</span>(<span class="string">'gulp-jshint'</span>),</span><br><span class="line">    uglify = <span class="keyword">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    concat = <span class="keyword">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, function() &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</span><br><span class="line">        .<span class="keyword">pipe</span>(jshint())</span><br><span class="line">        .<span class="keyword">pipe</span>(jshint.reporter(<span class="string">'default'</span>))</span><br><span class="line">        .<span class="keyword">pipe</span>(uglify())</span><br><span class="line">        .<span class="keyword">pipe</span>(concat(<span class="string">'app.js'</span>))</span><br><span class="line">        .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>2.使用gulp-load-plugins自动载入所有已安装的模块</p>
<blockquote>
<p>使用gulp-load-plugins模块，可以加载package.json文件中所有的gulp模块。</p>
</blockquote>
<p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">devDependencies</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">gulp-concat</span>": <span class="value"><span class="string">"~2.2.0"</span></span>,</span><br><span class="line">        "<span class="attribute">gulp-uglify</span>": <span class="value"><span class="string">"~0.2.1"</span></span>,</span><br><span class="line">        "<span class="attribute">gulp-jshint</span>": <span class="value"><span class="string">"~1.5.1"</span></span>,</span><br><span class="line">        "<span class="attribute">gulp</span>": <span class="value"><span class="string">"~3.5.6"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>gulpfile.js</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require<span class="params">('gulp')</span>,</span><br><span class="line">    gulpLoadPlugins = require<span class="params">('gulp-load-plugins')</span>,</span><br><span class="line">    plugins = gulpLoadPlugins<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">gulp.task<span class="params">('js', function<span class="params">()</span> &#123;</span><br><span class="line">    return gulp.src<span class="params">('js/*.js')</span></span><br><span class="line">        .pipe<span class="params">(plugins.jshint<span class="params">()</span>)</span></span><br><span class="line">        .pipe<span class="params">(plugins.jshint.reporter<span class="params">('default')</span>)</span></span><br><span class="line">        .pipe<span class="params">(plugins.uglify<span class="params">()</span>)</span></span><br><span class="line">        .pipe<span class="params">(plugins.concat<span class="params">('app.js')</span>)</span></span><br><span class="line">        .pipe<span class="params">(gulp.dest<span class="params">('build')</span>)</span>;</span><br><span class="line">&#125;)</span>;</span><br></pre></td></tr></table></figure>
<p>gulp.src()</p>
<blockquote>
<p>gulp模块的src方法，用于产生数据流。它的参数表示所要处理的文件，一般有以下几种形式。</p>
</blockquote>
<p>js/app.js：指定确切的文件名。 js/<em>.js：某个目录所有后缀名为js的文件。 js/\</em>*/*.js：某个目录及其所有子目录中的所有后缀名为js的文件。 !js/app.js：除了js/app.js以外的所有文件。 *.+(js|css)：匹配项目根目录下，所有后缀名为js或css的文件。 [‘js/*<em>/\</em>.js’, ‘!js/*<em>/\</em>.min.js’]：还可以是一个数组，用来指定多个成员。</p>
<p>gulp.task()</p>
<blockquote>
<p>gulp模块的task方法，用于定义具体的任务。它的第一个参数是任务名，第二个参数是任务函数</p>
</blockquote>
<ul>
<li>非常简单的任务函数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>task方法还可以指定按顺序运行的一组任务：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'css...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'js...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'imgs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'imgs...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'imgs'</span>]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码先指定build任务，它按次序由css、js、imgs三个任务所组成。注意，由于每个任务都是异步调用，所以没有办法保证js任务的开始运行的时间，正是css任务运行结束。</p>
</blockquote>
<ul>
<li>任务严格按次序运行：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello world!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, [<span class="string">'greet'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'css...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'js...'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'css'</span>, <span class="string">'js'</span>]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码表明，css任务依赖greet任务，所以css一定会在greet运行完成后再运行。</p>
</blockquote>
<ul>
<li>默认任务：</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your default task</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果一个任务的名字为default，就表明它是“默认任务”，在命令行直接输入gulp命令，就会运行该任务。</p>
</blockquote>
<p>gulp.watch()</p>
<blockquote>
<p>gulp模块的watch方法，用于指定需要监视的文件。一旦这些文件发生变动，就运行指定任务。</p>
</blockquote>
<ul>
<li>watch方法</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码指定，一旦templates目录中的模板文件发生变化，就运行build任务。</p>
</blockquote>
<ul>
<li>watch方法也可以用回调函数，代替指定的任务。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>另一种写法是watch方法所监控的文件发生变化时（修改、增加、删除文件），会触发change事件。可以对change事件指定回调函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);</span><br><span class="line"></span><br><span class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>除了change事件，watch方法还可能触发以下事件：</p>
<ul>
<li>end：回调函数运行完毕时触发。</li>
<li>error：发生错误时触发。</li>
<li>ready：当开始监听文件时触发。</li>
<li>nomatch：没有匹配的监听文件时触发。</li>
<li>watcher对象还包含其他一些方法。</li>
<li>watcher.end()：停止 watcher对象，不会再调用任务或回调函数。</li>
<li>watcher.files()：返回 watcher对象监视的文件。</li>
<li>watcher.add(glob)：增加所要监视的文件，它还可以附件第二个参数，表示回调函数。</li>
<li>watcher.remove(filepath)：从 watcher对象中移走一个监视的文件。</li>
</ul>
<h3 id="模块">模块</h3><ul>
<li><p>gulp-load-plugins模块（如上）</p>
</li>
<li><p>gulp-livereload：模块用于自动刷新浏览器，反映出源码的最新变化。它除了模块以外，还需要在浏览器中安装插件，用来配合源码变化。</p>
</li>
</ul>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(<span class="symbol">'gulp'</span>),</span><br><span class="line">    less = require(<span class="symbol">'gulp</span>-less'),</span><br><span class="line">    livereload = require(<span class="symbol">'gulp</span>-livereload'),</span><br><span class="line">    watch = require(<span class="symbol">'gulp</span>-watch');</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="symbol">'less'</span>, <span class="keyword">function</span><span class="literal">()</span> &#123;</span><br><span class="line">    gulp.src(<span class="symbol">'less</span>/*.less')</span><br><span class="line">        .pipe(watch<span class="literal">()</span>)</span><br><span class="line">        .pipe(less<span class="literal">()</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="symbol">'css'</span>))</span><br><span class="line">        .pipe(livereload<span class="literal">()</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码监视less文件，一旦编译完成，就自动刷新浏览器。</p>
<p>自动载入(gulp-load-plugins) 编译Sass (gulp-ruby-sass) Autoprefixer (gulp-autoprefixer) 缩小化(minify)CSS (gulp-minify-css) JSHint (gulp-jshint) 拼接 (gulp-concat) 丑化(Uglify) (gulp-uglify) 图片压缩 (gulp-imagemin) 即时重整(LiveReload) (gulp-livereload) 清理档案 (gulp-clean) 图片快取，只有更改过得图片会进行压缩 (gulp-cache) 更动通知 (gulp-notify)</p>
<p>gulp-less : less gulp-ruby-sass : 支持sass gulp-minify-css : 压缩css gulp-jshint : 检查js gulp-uglify : 压缩js gulp-concat : 合并文件 gulp-rename : 重命名文件 gulp-htmlmin : 压缩html gulp-clean : 清空文件夹</p>
<p>执行下列指令来安装这些外挂：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-<span class="keyword">concat</span> gulp-uglify gulp-imagemin gulp-clean gulp-notify gulp-rename gulp-livereload gulp-<span class="keyword">cache</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>指令将会安装必要的外挂，并纪录于package.json内的devDependencies物件。完整的gulp外挂清单可以在这裡找到。 <a href="http://gratimax.net/search-gulp-plugins" target="_blank" rel="external">http://gratimax.net/search-gulp-plugins</a></p>
</blockquote>
<h3 id="配置事例">配置事例</h3><p>示例配置：Gulp 实现完整的 SASS 自动编译并刷新网页</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Include gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Include Our Plugins</span></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lr = <span class="built_in">require</span>(<span class="string">'tiny-lr'</span>),</span><br><span class="line">    refresh = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</span><br><span class="line">    server = lr();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Task SASS</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([</span><br><span class="line">        <span class="string">'scss/**/*.scss'</span>,</span><br><span class="line">        <span class="string">'!scss/**/_*.scss'</span></span><br><span class="line">    ])</span><br><span class="line">        .pipe(sass(&#123;</span><br><span class="line">            includePaths: [<span class="string">'scss'</span>]</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'css'</span>))</span><br><span class="line">        .pipe(refresh(server));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'refresh'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([</span><br><span class="line">        <span class="string">'**/*.html'</span>,</span><br><span class="line">        <span class="string">'**/*.php'</span></span><br><span class="line">    ])</span><br><span class="line">        .pipe(refresh(server));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Task: default</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'sass'</span>);</span><br><span class="line"></span><br><span class="line">    server.listen(<span class="number">35729</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="built_in">console</span>.log(error);</span><br><span class="line"></span><br><span class="line">        gulp.watch([</span><br><span class="line">            <span class="string">'scss/**'</span>,</span><br><span class="line">            <span class="string">'img/**'</span></span><br><span class="line">        ], <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            gulp.run(<span class="string">'sass'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        gulp.watch([</span><br><span class="line">            <span class="string">'**/*.html'</span>,</span><br><span class="line">            <span class="string">'**.php'</span></span><br><span class="line">        ], <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            gulp.run(<span class="string">'refresh'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>gulpfile.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>), <span class="comment">// less</span></span><br><span class="line">  minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>), <span class="comment">// CSS压缩</span></span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>), <span class="comment">// js压缩</span></span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>), <span class="comment">// 合并文件</span></span><br><span class="line">  rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>), <span class="comment">// 重命名</span></span><br><span class="line">  clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>); <span class="comment">//清空文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// less解析</span></span><br><span class="line">gulp.task(<span class="string">'build-less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./javis/static/less/lib/s-production.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/lib/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./javis/static/less/lib/s-skins.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/lib/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./javis/static/less/lib/s/s.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/lib/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./javis/static/less/*.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并、压缩、重命名css</span></span><br><span class="line">gulp.task(<span class="string">'stylesheets'</span>, [<span class="string">'build-less'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注意这里通过数组的方式写入两个地址,仔细看第一个地址是css目录下的全部css文件,第二个地址是css目录下的areaMap.css文件,但是它前面加了!,这个和.gitignore的写法类似,就是排除掉这个文件.</span></span><br><span class="line">  gulp.src([<span class="string">'./javis/static/build/css/*.css'</span>, <span class="string">'!./javis/static/build/css/areaMap.css'</span>])</span><br><span class="line">    .pipe(concat(<span class="string">'all.css'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/'</span>))</span><br><span class="line">    .pipe(rename(&#123;</span><br><span class="line">      suffix: <span class="string">'.min'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并，压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'javascripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./javis/static/js/*.js'</span>)</span><br><span class="line">    .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js'</span>))</span><br><span class="line">    .pipe(rename(&#123;</span><br><span class="line">      suffix: <span class="string">'.min'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空图片、样式、js</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./javis/static/build/css/all.css'</span>, <span class="string">'./javis/static/build/css/all.min.css'</span>], &#123;</span><br><span class="line">    read: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">    .pipe(clean(&#123;</span><br><span class="line">      force: <span class="literal">true</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将bower的库文件对应到指定位置</span></span><br><span class="line">gulp.task(<span class="string">'buildlib'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular/angular.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular/angular.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/bootstrap/dist/js/bootstrap.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/jquery/dist/jquery.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular-route/angular-route.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular-animate/angular-animate.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular-bootstrap/ui-bootstrap.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/js/'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">//--------------------------css-------------------------------------</span></span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./javis/static/less/fonts/*'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/fonts/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/bootstrap/fonts/*'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/fonts/'</span>))</span><br><span class="line"></span><br><span class="line">  gulp.src(<span class="string">'./bower_components/bootstrap/dist/css/bootstrap.min.css'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./javis/static/build/css/lib'</span>))</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义develop任务在日常开发中使用</span></span><br><span class="line">gulp.task(<span class="string">'develop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.run(<span class="string">'buildlib'</span>, <span class="string">'build-less'</span>, <span class="string">'javascripts'</span>, <span class="string">'stylesheets'</span>);</span><br><span class="line"></span><br><span class="line">  gulp.watch(<span class="string">'./javis/static/less/*.less'</span>, [<span class="string">'build-less'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个prod任务作为发布或者运行时使用</span></span><br><span class="line">gulp.task(<span class="string">'prod'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.run(<span class="string">'buildlib'</span>, <span class="string">'build-less'</span>, <span class="string">'stylesheets'</span>, <span class="string">'javascripts'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听.less文件,一旦有变化,立刻调用build-less任务执行</span></span><br><span class="line">  gulp.watch(<span class="string">'./javis/static/less/*.less'</span>, [<span class="string">'build-less'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp命令默认启动的就是default认为,这里将clean任务作为依赖,也就是先执行一次clean任务,流程再继续.</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.run(<span class="string">'develop'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="gulp_与_Grunt">gulp 与 Grunt</h3><p>gulpfile.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span><br><span class="line"> * gulp</span><br><span class="line"> * $ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Load plugins</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>),</span><br><span class="line">  autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</span><br><span class="line">  minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">  jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>),</span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">  imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</span><br><span class="line">  rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">  notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</span><br><span class="line">  cache = <span class="built_in">require</span>(<span class="string">'gulp-cache'</span>),</span><br><span class="line">  livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),</span><br><span class="line">  del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Styles</span></span><br><span class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/styles/main.scss'</span>)</span><br><span class="line">    .pipe(sass(&#123;</span><br><span class="line">      style: <span class="string">'expanded'</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</span><br><span class="line">    .pipe(rename(&#123;</span><br><span class="line">      suffix: <span class="string">'.min'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</span><br><span class="line">    .pipe(notify(&#123;</span><br><span class="line">      message: <span class="string">'Styles task complete'</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scripts</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/scripts/**/*.js'</span>)</span><br><span class="line">    .pipe(jshint(<span class="string">'.jshintrc'</span>))</span><br><span class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>))</span><br><span class="line">    .pipe(concat(<span class="string">'main.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</span><br><span class="line">    .pipe(rename(&#123;</span><br><span class="line">      suffix: <span class="string">'.min'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/scripts'</span>))</span><br><span class="line">    .pipe(notify(&#123;</span><br><span class="line">      message: <span class="string">'Scripts task complete'</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Images</span></span><br><span class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/images/**/*'</span>)</span><br><span class="line">    .pipe(cache(imagemin(&#123;</span><br><span class="line">      optimizationLevel: <span class="number">3</span>,</span><br><span class="line">      progressive: <span class="literal">true</span>,</span><br><span class="line">      interlaced: <span class="literal">true</span></span><br><span class="line">    &#125;)))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">    .pipe(notify(&#123;</span><br><span class="line">      message: <span class="string">'Images task complete'</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clean</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  del([<span class="string">'dist/assets/css'</span>, <span class="string">'dist/assets/js'</span>, <span class="string">'dist/assets/img'</span>], cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default task</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>, <span class="string">'images'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watch</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Watch .scss files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/styles/**/*.scss'</span>, [<span class="string">'styles'</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Watch .js files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/scripts/**/*.js'</span>, [<span class="string">'scripts'</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Watch image files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>, [<span class="string">'images'</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create LiveReload server</span></span><br><span class="line">  livereload.listen();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Watch any files in dist/, reload on change</span></span><br><span class="line">  gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> * Grunt</span><br><span class="line"> * $ npm install grunt-contrib-uglify grunt-autoprefixer grunt-contrib-cssmin grunt-contrib-imagemin grunt-contrib-sass grunt-contrib-watch grunt-contrib-concat grunt-contrib-clean grunt-contrib-jshint grunt-notify --save-dev</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sass</span></span><br><span class="line">    sass: &#123;</span><br><span class="line">      dist: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          style: <span class="string">'expanded'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'dist/styles/main.css'</span>: <span class="string">'src/styles/main.scss'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Autoprefix</span></span><br><span class="line">    autoprefixer: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        browsers: [</span><br><span class="line">          <span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      dist: &#123;</span><br><span class="line">        src: <span class="string">'dist/styles/main.css'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSS minify</span></span><br><span class="line">    cssmin: &#123;</span><br><span class="line">      dist: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">'dist/styles/main.min.css'</span>: <span class="string">'dist/styles/main.css'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JShint</span></span><br><span class="line">    jshint: &#123;</span><br><span class="line">      files: [<span class="string">'src/scripts/**/*.js'</span>],</span><br><span class="line">      options: &#123;</span><br><span class="line">        jshintrc: <span class="string">'.jshintrc'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Concat</span></span><br><span class="line">    concat: &#123;</span><br><span class="line">      js: &#123;</span><br><span class="line">        src: [<span class="string">'src/scripts/**/*.js'</span>],</span><br><span class="line">        dest: <span class="string">'dist/scripts/main.js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Uglify</span></span><br><span class="line">    uglify: &#123;</span><br><span class="line">      dist: &#123;</span><br><span class="line">        src: <span class="string">'dist/scripts/main.js'</span>,</span><br><span class="line">        dest: <span class="string">'dist/scripts/main.min.js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Imagemin</span></span><br><span class="line">    imagemin: &#123;</span><br><span class="line">      dist: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          optimizationLevel: <span class="number">3</span>,</span><br><span class="line">          progressive: <span class="literal">true</span>,</span><br><span class="line">          interlaced: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: [&#123;</span><br><span class="line">          expand: <span class="literal">true</span>,</span><br><span class="line">          cwd: <span class="string">'src/images'</span>,</span><br><span class="line">          src: [<span class="string">'**/*.&#123;png,jpg,gif&#125;'</span>],</span><br><span class="line">          dest: <span class="string">'dist/images'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean</span></span><br><span class="line">    clean: &#123;</span><br><span class="line">      build: [<span class="string">'dist/styles'</span>, <span class="string">'dist/scripts'</span>, <span class="string">'dist/images'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Notify</span></span><br><span class="line">    notify: &#123;</span><br><span class="line">      styles: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          message: <span class="string">'Styles task complete'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      scripts: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          message: <span class="string">'Scripts task complete'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      images: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          message: <span class="string">'Images task complete'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Watch</span></span><br><span class="line">    watch: &#123;</span><br><span class="line">      styles: &#123;</span><br><span class="line">        files: <span class="string">'src/styles/**/*.scss'</span>,</span><br><span class="line">        tasks: [<span class="string">'sass'</span>, <span class="string">'autoprefixer'</span>, <span class="string">'cssmin'</span>, <span class="string">'notify:styles'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      scripts: &#123;</span><br><span class="line">        files: <span class="string">'src/scripts/**/*.js'</span>,</span><br><span class="line">        tasks: [<span class="string">'concat'</span>, <span class="string">'uglify'</span>, <span class="string">'notify:scripts'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      images: &#123;</span><br><span class="line">        files: <span class="string">'src/images/**/*'</span>,</span><br><span class="line">        tasks: [<span class="string">'imagemin'</span>, <span class="string">'notify:images'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      livereload: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          livereload: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: [</span><br><span class="line">          <span class="string">'dist/styles/**/*.css'</span>,</span><br><span class="line">          <span class="string">'dist/scripts/**/*.js'</span>,</span><br><span class="line">          <span class="string">'dist/images/**/*'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Default task</span></span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'jshint'</span>,</span><br><span class="line">    <span class="string">'clean'</span>,</span><br><span class="line">    <span class="string">'concat'</span>,</span><br><span class="line">    <span class="string">'uglify'</span>,</span><br><span class="line">    <span class="string">'sass'</span>,</span><br><span class="line">    <span class="string">'autoprefixer'</span>,</span><br><span class="line">    <span class="string">'cssmin'</span>,</span><br><span class="line">    <span class="string">'imagemin'</span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load plugins</span></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-autoprefixer'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-sass'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-imagemin'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-clean'</span>);</span><br><span class="line">  grunt.loadNpmTasks(<span class="string">'grunt-notify'</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>官网：<a href="http://gulpjs.com">http://gulpjs.com</a></li>
<li>API：<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a></li>
</ul>
<blockquote>
<p>Gulp与Grunt一样，也是一个自动任务运行器。它充分借鉴了Unix操作系统的管道（pipe）思想，很多人认为，在操作上，它要比Grunt简单。</p>
</blockquote>
<h3 id="安装">安装</h3><blockquote>
<p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> gulp</span><br><span class="line"></span><br><span class="line">// 将gulp安装到项目本地</span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev gulp</span></span><br><span class="line">// 安装插件</span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev gulp-uglify</span></span><br><span class="line">npm <span class="keyword">install</span> gulp-jshint gulp-sass gulp-<span class="keyword">concat</span> gulp-uglify gulp-rename <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="grunt" scheme="http://yoursite.com/tags/grunt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery on()方法绑定多个选择器,多个事件]]></title>
    <link href="http://yoursite.com/2015/09/01/jqueryon/"/>
    <id>http://yoursite.com/2015/09/01/jqueryon/</id>
    <published>2015-09-01T05:31:16.000Z</published>
    <updated>2015-09-01T05:31:16.000Z</updated>
    <content type="html"><![CDATA[<p>jQuery在1.7版本后，建议大家用on方法代替之前的bind、live、delegate方法。<br>那上面一句如果用on的话，怎么写呢？</p>
<p>其实查看live源码就知道，live实际是委托doucment进行事件委派的。<br>按照这个思路，可以将on方法绑定到document即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'#header .fixed-feedback-bn, #sb-sec .feedback-bn'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="comment">// code...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>还有一种情况，on()方法绑定多个事件，可以这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"table.planning_grid"</span>).on(&#123;</span><br><span class="line">    mouseenter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Handle mouseenter...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mouseleave: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Handle mouseleave...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Handle click...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"td"</span>);</span><br></pre></td></tr></table></figure>
<p>最后，用on()方法绑定多个选择器，多个事件则可以这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(&#123;</span><br><span class="line">	mouseenter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Handle mouseenter...</span></span><br><span class="line">	&#125;,</span><br><span class="line">	mouseleave: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Handle mouseleave...</span></span><br><span class="line">	&#125;,</span><br><span class="line">	click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Handle click...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="string">'#header .fixed-feedback-bn, #sb-sec .feedback-bn'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>jQuery在1.7版本后，建议大家用on方法代替之前的bind、live、delegate方法。<br>那上面一句如果用on的话，怎么写呢？</p>
<p>其实查看live源码就知道，live实际是委托doucment进行事件委派的。<br>按照这个思路，可以将on方法绑]]>
    </summary>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="on" scheme="http://yoursite.com/tags/on/"/>
    
      <category term="事件" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="多事件" scheme="http://yoursite.com/tags/%E5%A4%9A%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[input 事件兼容处理以及中文输入法优化]]></title>
    <link href="http://yoursite.com/2015/09/01/inputopt/"/>
    <id>http://yoursite.com/2015/09/01/inputopt/</id>
    <published>2015-09-01T03:59:48.000Z</published>
    <updated>2015-09-01T03:59:48.000Z</updated>
    <content type="html"><![CDATA[<p><strong>oninput</strong> 是 HTML5 的标准事件，对于检测 textarea, input:text, input:password 和 input:search 这几个元素通过用户界面发生的内容变化非常有用，在内容修改后立即被触发，不像 <strong>onchange</strong> 事件需要失去焦点才触发。 oninput 事件兼容为ie9+, ie下可以<strong>onpropertychange</strong>事件不是本节内容.</p>
<h1 id="bug:">bug:</h1><ol>
<li>IE9下不触发退格/删除/剪切输入事件（IE9 doesn’t fire input event on backspace/del/cut）</li>
<li>当用户当前输入法状态是中文时，在未选择词组到输入框也会触发事件</li>
</ol>
<a id="more"></a>
<h1 id="解决">解决</h1><blockquote>
<p>为元素添加 cut， keyup, 事件例：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">_.on(el, <span class="string">'input'</span>, <span class="keyword">this</span>.listener)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE9 doesn't fire input event on backspace/del/cut</span></span><br><span class="line"><span class="keyword">if</span> (_.isIE9) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onCut = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _.nextTick(self.listener)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.onDel = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.keyCode === <span class="number">46</span> || e.keyCode === <span class="number">8</span>) &#123;</span><br><span class="line">            self.listener()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    _.on(el, <span class="string">'cut'</span>, <span class="keyword">this</span>.onCut)</span><br><span class="line">    _.on(el, <span class="string">'keyup'</span>, <span class="keyword">this</span>.onDel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来自于vuejs</p>
<blockquote>
<p>中文输入优化，我们想要的结果是只有词组进入了输入框才会触发事件</p>
</blockquote>
<p>我们可以使用两个较新的事件来达到预期的效果：compositionstart和compositionend,也是ie9+的兼容最合适不过。</p>
<p>MDN:</p>
<p><strong>compositionstart</strong></p>
<blockquote>
<p>当浏览器有非直接的文字输入时, compositionstart事件会以同步模式触发.</p>
</blockquote>
<p><strong>compositionend</strong></p>
<blockquote>
<p> 当浏览器是直接的文字输入时, compositionend会以同步模式触发.</p>
</blockquote>
<p>看了两个事件就明白，为元素添加这个两个事件，做一个开关，如下:<br>html:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"person"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">'#person'</span>);</span><br><span class="line"><span class="keyword">var</span> cpLock = <span class="literal">false</span>;</span><br><span class="line">node.addEventListener(<span class="string">'compositionstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cpLock = <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line">node.addEventListener(<span class="string">'compositionend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cpLock = <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line">node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!cpLock)<span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>thx for reading。。。。。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>oninput</strong> 是 HTML5 的标准事件，对于检测 textarea, input:text, input:password 和 input:search 这几个元素通过用户界面发生的内容变化非常有用，在内容修改后立即被触发，不像 <strong>onchange</strong> 事件需要失去焦点才触发。 oninput 事件兼容为ie9+, ie下可以<strong>onpropertychange</strong>事件不是本节内容.</p>
<h1 id="bug:">bug:</h1><ol>
<li>IE9下不触发退格/删除/剪切输入事件（IE9 doesn’t fire input event on backspace/del/cut）</li>
<li>当用户当前输入法状态是中文时，在未选择词组到输入框也会触发事件</li>
</ol>]]>
    
    </summary>
    
      <category term="input" scheme="http://yoursite.com/tags/input/"/>
    
      <category term="事件" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端代码规范,类似google]]></title>
    <link href="http://yoursite.com/2015/09/01/daimaguifan/"/>
    <id>http://yoursite.com/2015/09/01/daimaguifan/</id>
    <published>2015-09-01T03:38:28.000Z</published>
    <updated>2015-09-01T03:38:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>jade类以及内嵌js</p>
</blockquote>
<ul>
<li>缩进为2，除了js声明 如：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line"><span class="class">.form-group</span></span><br><span class="line">  <span class="tag">label</span><span class="class">.col-sm-2</span><span class="class">.control-label</span> 主机</span><br><span class="line">    <span class="class">.col-sm-6</span></span><br><span class="line">      <span class="tag">input</span>.<span class="function"><span class="title">form-control</span><span class="params">(type=<span class="string">"text"</span>, name=<span class="string">"host"</span>)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> routeArr = [],</span><br><span class="line">    buttonType = $route.find(<span class="string">'button'</span>)[<span class="number">0</span>].dataset.type,</span><br><span class="line">    selectCollection = <span class="string">'custom'</span>;</span><br><span class="line">$.<span class="keyword">each</span>(selectCollection, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> selectVal = <span class="keyword">this</span>.value;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.value)selectVal = <span class="string">'*'</span>;</span><br><span class="line">  routeArr.push(selectVal)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通用前端规范</p>
</blockquote>
<h3 id="html规范">html规范</h3><ul>
<li>排版缩进为4</li>
<li>标签属性使用小写</li>
<li>在HTML5规范里并没有严格要求属性值两边加引号。但考虑到一些属性可以接受空白值，为了保持一致性，我们要求所有属性值必须加上引号。</li>
<li>段落分隔符要使用实际对应的 <code>&lt;p&gt;</code> 素，而不是用多个<code>&lt;br&gt;</code>标签。</li>
<li>在合适的条件下，充分利用<code>&lt;dl&gt;</code> （定义列表）和<code>&lt;blockquote&gt;</code> 标签。</li>
<li>列表中的条目必须总是放置于<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>或<code>&lt;dl&gt;</code> 中，永远不要用一组 <code>&lt;div&gt;</code>或<code>&lt;p&gt;</code> 来表示。</li>
<li>给每个表单里的字段加上 <code>&lt;label&gt;</code> 标签，其中的 for 属性必须和对应的输入字段对应，这样用户就可以点击标签。同理，给标签加上 cursor:pointer; 样式也是明智的做法。</li>
<li>多媒体标签向后兼容，记得加上alt属性</li>
</ul>
<h3 id="CSS规范–(like_google)">CSS规范–(like google)</h3><ul>
<li>正确使用缩写，例如navigation就可以缩写为nav，而author就不要缩写</li>
<li>id与class前不必加上标签类型</li>
<li>属性尽量使用简写形式，如font或background等</li>
<li>0后面不要加上单位</li>
<li>小数前不要加上0</li>
<li>url()中不要加入引号，例如@import url(//www.google.com/css/go.css);</li>
<li>16进制尽量使用3位表示</li>
<li>可以为项目加入前缀，例如.adw-help {} /<em> AdWords </em>/</li>
<li>分词使用“-”，如前例</li>
<li><p>属性采用字典序申明，包括前缀如moz安排在webkit之前</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background</span>:<span class="value"> fuchsia</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"> black</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">text-indent</span>:<span class="value"> <span class="number">2em</span></span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性：与值之间用一个空格分开，例如font-weight: bold;</p>
</li>
<li>为每个选择符及每个属性申明单独使用一行</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span>,</span><br><span class="line"><span class="tag">h2</span>,</span><br><span class="line"><span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.2</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Javascript规范">Javascript规范</h3><ul>
<li>变量声明必须使用var</li>
<li>记得使用分号结尾</li>
<li>随意使用嵌套函数</li>
<li>块级域中不用使用函数声明形式（不符合标准），应该这样处理：</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>原生类型不要使用包装对象的构造函数来进行声明，但是可以用来进行类型转换如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  alert(<span class="string">'hi'</span>);  <span class="comment">// This will never be alerted.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>(<span class="number">0</span>) == <span class="string">'boolean'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">0</span>) == <span class="string">'object'</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>不要使用with</li>
<li>for in 不要用在遍历array上，只能用在object上</li>
<li>多行的字符串字面量，应该使用+进行字符串拼接，而不是进行换行</li>
<li>array与object创建使用字面量而不是包装构造函数</li>
<li>不要改变内置对象的prototype</li>
<li>私有成员使用前下划线：_person</li>
<li>永远要为项目添加一个命名空间，不要为外部引入的代码再引入自定义的成员，如果必要则应该使用外部代码暴露的api</li>
<li>文件命名统一使用小写”.js”，同时推荐”-“而不是”_”</li>
<li>字符串相对于双引号，推荐使用单引号</li>
<li>留空。总的来说，使用留空应该遵循源远流长的英语阅读惯例。 例如，每个逗号和冒号（以及适用的分号）后面要空一格，但在括号内部的左侧和右侧都不要加空格。另外，大括号应该总是和他们前面的参数出现在同一行。</li>
</ul>
<p>来看看下面的 JavaScript for循环的例子…</p>
<h4 id="正确">正确</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = arr.<span class="built_in">length</span>; <span class="built_in">i</span> &lt; <span class="built_in">j</span>; <span class="built_in">i</span>++) <span class="cell">&#123;</span><br><span class="line">	// Do something.</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="不正确">不正确</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( var <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = arr.<span class="built_in">length</span>; <span class="built_in">i</span> &lt; <span class="built_in">j</span>; <span class="built_in">i</span>++ )</span><br><span class="line"><span class="cell">&#123;</span><br><span class="line">	// Do something.</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="不正确-1">不正确</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="built_in">i</span>=<span class="number">0</span>,<span class="built_in">j</span>=arr.<span class="built_in">length</span>;<span class="built_in">i</span>&lt;<span class="built_in">j</span>;<span class="built_in">i</span>++)<span class="cell">&#123;</span><br><span class="line">	// Do something.</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>jade类以及内嵌js</p>
</blockquote>
<ul>
<li>缩进为2，除了js声明 如：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line"><span class="class">.form-group</span></span><br><span class="line">  <span class="tag">label</span><span class="class">.col-sm-2</span><span class="class">.control-label</span> 主机</span><br><span class="line">    <span class="class">.col-sm-6</span></span><br><span class="line">      <span class="tag">input</span>.<span class="function"><span class="title">form-control</span><span class="params">(type=<span class="string">"text"</span>, name=<span class="string">"host"</span>)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> routeArr = [],</span><br><span class="line">    buttonType = $route.find(<span class="string">'button'</span>)[<span class="number">0</span>].dataset.type,</span><br><span class="line">    selectCollection = <span class="string">'custom'</span>;</span><br><span class="line">$.<span class="keyword">each</span>(selectCollection, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> selectVal = <span class="keyword">this</span>.value;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.value)selectVal = <span class="string">'*'</span>;</span><br><span class="line">  routeArr.push(selectVal)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通用前端规范</p>
</blockquote>
<h3 id="html规范">html规范</h3><ul>
<li>排版缩进为4</li>
<li>标签属性使用小写</li>
<li>在HTML5规范里并没有严格要求属性值两边加引号。但考虑到一些属性可以接受空白值，为了保持一致性，我们要求所有属性值必须加上引号。</li>
<li>段落分隔符要使用实际对应的 <code>&lt;p&gt;</code> 素，而不是用多个<code>&lt;br&gt;</code>标签。</li>
<li>在合适的条件下，充分利用<code>&lt;dl&gt;</code> （定义列表）和<code>&lt;blockquote&gt;</code> 标签。</li>
<li>列表中的条目必须总是放置于<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>或<code>&lt;dl&gt;</code> 中，永远不要用一组 <code>&lt;div&gt;</code>或<code>&lt;p&gt;</code> 来表示。</li>
<li>给每个表单里的字段加上 <code>&lt;label&gt;</code> 标签，其中的 for 属性必须和对应的输入字段对应，这样用户就可以点击标签。同理，给标签加上 cursor:pointer; 样式也是明智的做法。</li>
<li>多媒体标签向后兼容，记得加上alt属性</li>
</ul>
<h3 id="CSS规范–(like_google)">CSS规范–(like google)</h3><ul>
<li>正确使用缩写，例如navigation就可以缩写为nav，而author就不要缩写</li>
<li>id与class前不必加上标签类型</li>
<li>属性尽量使用简写形式，如font或background等</li>
<li>0后面不要加上单位</li>
<li>小数前不要加上0</li>
<li>url()中不要加入引号，例如@import url(//www.google.com/css/go.css);</li>
<li>16进制尽量使用3位表示</li>
<li>可以为项目加入前缀，例如.adw-help {} /<em> AdWords </em>/</li>
<li>分词使用“-”，如前例</li>
<li><p>属性采用字典序申明，包括前缀如moz安排在webkit之前</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
